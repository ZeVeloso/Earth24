
@page "/historico/{startdate}"
@using DataLibrary
@using models
@using Microsoft.Extensions.Configuration
@using System.Net.Http
@using System.Net.Http.Json
@using Earth24
@using Microsoft.JSInterop
@inject IDataAcess _data
@inject IConfiguration _config
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IHttpClientFactory _clientFactory
@inject NavigationManager NavigationManager

@functions {
    [Parameter]
    public string startdate { get; set; }
    [Parameter]
    public string enddate { get; set; }
}


<h3 class="text-center ">Historico de Terramotos</h3>


<br />

<div class="row">
    <div class="col">

    </div>
    <div class="col">
       
    </div>
    <div class="col">

    </div>
    <div class="col">
        <button class="centering rounded-pill btn-block btn btn-outline-info" @onclick="DateRedirect">Back</button>
    </div>
    <div class="col">
      
    </div>
    <div class="col">

    </div>
    <div class="col">

    </div>
</div>


@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (earthquake is null)
{
    <br />
    <div class="h4 text-center">Loading...</div>

}
else
{
    <p>@InitDate</p>
    <p>@EndDate</p>

    @*<p>@changeTime(123)</p>*@

    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Magnitude</th>
                <th>Localização</th>
                <th>Data</th>
                <th>Título</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var w in earthquake.features)
            {

                <tr>
                    <td>@w.properties.mag</td>
                    <td>@w.properties.place</td>
                    <td>@changeTime(@w.properties.time)</td>
                    <td>@w.properties.title</td>
                    
                </tr>

            }
        </tbody>
    </table>
}

@code {

    Earthquake earthquake;

    string errorString;

    private string currentHeading = "Initial heading";
    private string newHeading;
    private string InitDate;
    private string EndDate;
    DateTime localDateTime, univDateTime;

    protected override async Task OnInitializedAsync()
    {

        var client = _clientFactory.CreateClient("earth");

        try
        {
            earthquake = await client.GetFromJsonAsync<Earthquake>($"query?format=geojson{startdate}");

            errorString = null;
        }
        catch (Exception e)
        {
            errorString = $"There was a error: {e.Message}";
        }


    }

    public string url = "/historico";

    public void DateRedirect()
    {

        // Attach the parameter to the url
        NavigationManager.NavigateTo(url);
    }




    private string changeTime(long strDateTimel)
    {

        long dateL = (long)Convert.ToDouble((strDateTimel.ToString() + "0")); ;

        DateTime start = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        DateTime date = start.AddMilliseconds(dateL / 10).ToLocalTime();

        var dtstr1 = date.ToString("MM/dd/yyyy");  // 02/19/2014
        return dtstr1;
    }
}
